@import url('https://fonts.googleapis.com/css2?family=Lato&display=swap');

* {
  box-sizing: border-box;
}

body {
  font-family: 'Lato', sans-serif;
  background-color: #242333;
  color: #fff;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  height: 100vh;
  margin: 0;
}

.movie-container {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  align-items: center;
  margin: 20px 0;
}

.movie-container select {
  background-color: #fff;
  border: 0;
  border-radius: 5px;
  font-size: 14px;
  margin-left: 10px;
  padding: 5px 15px;
}

.seat {
  background-color: #444451;
  height: 12px;
  width: 15px;
  margin: 3px;
  border-top-left-radius: 10px;
  border-top-right-radius: 10px;
}

.seat.selected {
  background-color: #6feaf6;
}

.seat.occupied {
  background-color: red;
}

/* 'div' element that is the second div element of its parent: */
.seat:nth-of-type(2) {
  margin-right: 18px;
}

/* :nth-last-of-type(n) selector matches every element that is the nth child, of a particular type, of its parent, counting from the last child */
.seat:nth-last-of-type(2) {
  margin-left: 18px;
}

/* prevents specific items from being selected, it is known as the negation pseudo-class
:not(selector) selector matches every element that is NOT the specified element/selector - '.occupied'
*/
/* apply hover on every elements except elements in '.occupied' selector */
.seat:not(.occupied):hover {
  cursor: pointer;

  /* transform property applies a 2D or 3D transformation to an element.
    scale() method increases or decreases the size of an element.
    1 is the default & adding .2 to scale it little bit more
   */
  transform: scale(1.2);
}

/* showcase */
.showcase .seat:not(.occupied):hover {
  cursor: default;
  transform: scale(1);
}

.showcase {
  background-color: rgba(0, 0, 0, 0.1);
  padding: 5px 10px;
  border-radius: 5px;
  color: #777;
  list-style: none;
  display: flex;
  justify-content: space-between;
}

.showcase li {
  display: flex;
  justify-content: center;
  align-items: center;
  margin: 0 10px;
}

.showcase li small {
  margin-left: 2px;
}

.container {
  /* Give a 3D-positioned element some perspective,
  The perspective property defines how far the object is away from the user. So, a lower value will result in a more intensive 3D effect than a higher value.
  When defining the perspective property for an element, it is the CHILD elements that get the perspective view, NOT the element itself.
  */
  perspective: 1000px;
  margin-bottom: 20px;
}

.row {
  display: flex;
}

.screen {
  background-color: #fff;
  height: 70px;
  width: 100%;
  margin: 15px 0;
  transform: rotateX(-45deg);
  box-shadow: 0 3px 10px rgba(255, 255, 255, 0.7);
}

p span {
  color: #6feaf6;
}

p.text {
  margin: 5px 0;
}
